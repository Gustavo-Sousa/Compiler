
DOCUMENT START
TOKENS
<DEFAULT> TOKEN : {
<PUBLIC: "public"> : {
| <STATIC: "static"> : {
| <VOID: "void"> : {
| <MAIN: "main"> : {
| <CLASS: "class"> : {
| <EXTENDS: "extends"> : {
| <PRINT: "System.out.println"> : {
| <THIS: "this"> : {
| <NEW: "new"> : {
| <STRING: "String"> : {
| <INT: "int"> : {
| <RETURN: "return"> : {
| <BOOLEAN: "boolean"> : {
| <TRUE: "true"> : {
| <FALSE: "false"> : {
| <IF: "if"> : {
| <ELSE: "else"> : {
| <WHILE: "while"> : {
| <LENGTH: "length"> : {
| <#LETTER: ["A"-"Z"] | ["a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <#REAL: (<DIGIT>)+ "." (<DIGIT>)* | (<DIGIT>)* "." (<DIGIT>)+>
| <#INTEGER: (<DIGIT>)+>
| <AND: "&&"> : {
| <EQUAL: "="> : {
| <LESS_THAN: "<"> : {
| <PLUS: "+"> : {
| <MINUS: "-"> : {
| <TIMES: "*"> : {
| <LPAREN: "("> : {
| <RPAREN: ")"> : {
| <LBRACE: "{"> : {
| <RBRACE: "}"> : {
| <RBRACE_INTER: ")?"> : {
| <LCOLCH: "["> : {
| <RCOLCH: "]"> : {
| <BANG: "!"> : {
| <DOT: "."> : {
| <COMMA: ","> : {
| <SEMI_COMMA: ";"> : {
| <ID: <LETTER> (<LETTER> | <DIGIT> | "-")*> : {
| <INTEGER_LITERAL: (["0"-"9"])+ | <REAL>> : {
}

<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
}

NON-TERMINALS
// Doubt if the method has to have the same name of the node
	S	:=	MainClass ( ClassDecl )* <EOF>
	MainClass	:=	<CLASS> Id <LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LCOLCH> <RCOLCH> Id <RPAREN> <LBRACE> Statement <RBRACE> <RBRACE>
	ClassDecl	:=	<CLASS> Id
	ClassDecl_Aux	:=	( <LBRACE> ( VarDecl )* ( MethodDecl )* <RBRACE> )
		|	( <EXTENDS> Id <LBRACE> Id ( VarDecl )* ( MethodDecl )* <RBRACE> )
		|	
	VarDecl	:=	Type Id <SEMI_COMMA>
	MethodDecl	:=	<PUBLIC> Type Id <LPAREN> FormalList <RPAREN> <LBRACE> ( VarDecl )* ( Statement )* <RETURN> Exp <SEMI_COMMA> <RBRACE>
	FormalList	:=	Type Id ( FormalRest )*
		|	
	FormalRest	:=	<COMMA> Type Id
	Type	:=	<INT> <LCOLCH> <RCOLCH>
		|	<BOOLEAN>
		|	<INT>
		|	Id
	Statement	:=	<LBRACE> ( Statement )* <RBRACE>
		|	<IF> <LPAREN> Exp <RPAREN> Statement <ELSE> Statement
		|	<WHILE> <LPAREN> Exp <RPAREN> Statement
		|	<PRINT> <LPAREN> Exp <RPAREN> <SEMI_COMMA>
		|	Id <EQUAL> Exp <SEMI_COMMA>
		|	Id <LCOLCH> Exp <RCOLCH> <EQUAL> Exp <SEMI_COMMA>
	Exp	:=	<TRUE>
		|	<FALSE>
		|	<INTEGER_LITERAL>
		|	Id
		|	<THIS>
		|	<NEW> <INT> <LCOLCH> Exp <RCOLCH>
		|	<NEW> Id <LPAREN> <RPAREN>
		|	<LPAREN> Exp <RPAREN>
		|	<BANG> Exp
// doubt with the exp_aux and use of object declaration atribution
	Exp_Aux	:=	<AND> Exp
		|	<LESS_THAN> Exp
		|	<PLUS> Exp
		|	<MINUS> Exp
		|	<TIMES> Exp
		|	<LCOLCH> Exp <RCOLCH>
		|	<DOT> <LENGTH>
		|	<DOT> Id <LPAREN> ExpList <RPAREN>
		|	
	ExpList	:=	( Exp ) ( ExpRest )*
		|	
	ExpRest	:=	<COMMA> Exp
	Id	:=	<ID>

DOCUMENT END
