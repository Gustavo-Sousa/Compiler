/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
import Semantic_actions.syntax_tree.*;
public class Parser implements ParserConstants {
    public static void main(String[] args) {
        try {
            new Parser(new java.io.FileInputStream(args[0])).S(); // Source code
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }

// Doubt if the method has to have the same name of the node
  static final public 
Program S() throws ParseException {MainClass main;
    ClassDecl class_decl;
    ClassDeclList class_list = new ClassDeclList();
    // Tenho d√∫vidas se isso deve continuar assim
            main = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      class_decl = ClassDecl();
class_list.addElement(class_decl);
    }
    jj_consume_token(0);
{if ("" != null) return new Program(main, class_list);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {Identifier class_id, id;
    Statement stm;
    jj_consume_token(CLASS);
    class_id = Id();
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LCOLCH);
    jj_consume_token(RCOLCH);
    id = Id();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    stm = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
{if ("" != null) return MainClass(class_id, id, stm);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl() throws ParseException {// Correction
    Identifier id;
    jj_consume_token(CLASS);
    id = Id();
{if ("" != null) return ClassDecl_Aux(id);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl_Aux(Identifier class_id) throws ParseException {// atention
    VarDecl var_dcl;
    VarDeclList var_list = new VarDeclList();
    MethodDecl mth_dcl;
    MethodDeclList mth_list;
    Identifier ext_id, id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        var_dcl = VarDecl();
var_list.addElement(var_dcl);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        mth_dcl = MethodDecl();
mth_list.addElement(mth_dcl);
      }
      jj_consume_token(RBRACE);
{if ("" != null) return new ClassDeclSimple(class_id, var_list, mth_list);}
      break;
      }
    case EXTENDS:{
      jj_consume_token(EXTENDS);
      ext_id = Id();
      jj_consume_token(LBRACE);
      id = Id();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        var_dcl = VarDecl();
var_list.addElement(var_dcl);
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        mth_dcl = MethodDecl();
mth_list.addElement(mth_dcl);
      }
      jj_consume_token(RBRACE);
{if ("" != null) return new ClassDeclExtends(class_id, id, var_list, mth_list);}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return new ClassDeclSimple(class_id);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDecl() throws ParseException {Type type;
    Identifier id;
    type = Type();
    id = Id();
    jj_consume_token(SEMI_COMMA);
{if ("" != null) return new VarDecl(type, id);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDecl() throws ParseException {Type type;
    Identifier id;
    FormalList formal_list;
    VarDecl var_dlc;
    VarDeclList var_list = new VarDeclList();
    Statement stm;
    StatementList stm_list = new StatementList();
    Expression exp;
    ExpList exp_list = new ExpList();
    jj_consume_token(PUBLIC);
    type = Type();
    id = Id();
    jj_consume_token(LPAREN);
    formal_list = FormalList();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_6;
      }
      var_dlc = VarDecl();
var_list.addElement(var_dlc);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case IF:
      case WHILE:
      case LBRACE:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
      stm = Statement();
stm_list.addElement(stm);
    }
    jj_consume_token(RETURN);
    exp = Exp();
    jj_consume_token(SEMI_COMMA);
    jj_consume_token(RBRACE);
{if ("" != null) return new MethodDecl( type, id, formal_list, var_list, stm_list, exp);}
    throw new Error("Missing return statement in function");
  }

  static final public Formal FormalList() throws ParseException {// doubt
    FormalList formal_list = new FormalList();
    Formal formal_head, formal_rest;
    Identifier id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:
    case ID:{
      type = Type();
      id = Id();
formal_head = new Formal(type, id);
formal_list.addElement(formal_head);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        formal_rest = FormalRest();
formal_list.addElement(formal_rest);
      }
{if ("" != null) return formal_list;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
{if ("" != null) return formal_list;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Formal FormalRest() throws ParseException {Type type;
    Identifier id;
    jj_consume_token(COMMA);
    type = Type();
    id = Id();
{if ("" != null) return new Formal(type, id);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {Identifier id;
    if (jj_2_2(2)) {
      jj_consume_token(INT);
      jj_consume_token(LCOLCH);
      jj_consume_token(RCOLCH);
{if ("" != null) return IntArrayType();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
{if ("" != null) return new BooleanType();}
        break;
        }
      case INT:{
        jj_consume_token(INT);
{if ("" != null) return new IntegerType();}
        break;
        }
      case ID:{
        id = Id();
{if ("" != null) return new IdentifierType(id);}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {Statement stm, else_stm;
    Identifier id;
    StatementList statement_list = new StatementList();
    Expression exp, exp2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRINT:
        case IF:
        case WHILE:
        case LBRACE:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_9;
        }
        statement = Statement();
statement_list.addElement(statement);
      }
      jj_consume_token(RBRACE);
{if ("" != null) return new Block(statement_list);}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      exp = Exp();
      jj_consume_token(RPAREN);
      stm = Statement();
      jj_consume_token(ELSE);
      elsestm = Statement();
{if ("" != null) return new If(exp, stm, elsestm);}
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      exp = Exp();
      jj_consume_token(RPAREN);
      stm = Statement();
{if ("" != null) return new While(exp, stm);}
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      exp = Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMI_COMMA);
{if ("" != null) return new Print(exp);}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_3(2)) {
        id = Id();
        jj_consume_token(EQUAL);
        exp = Exp();
        jj_consume_token(SEMI_COMMA);
{if ("" != null) return new Assign(id, exp);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          id = Id();
          jj_consume_token(LCOLCH);
          exp = Exp();
          jj_consume_token(RCOLCH);
          jj_consume_token(EQUAL);
          exp2 = Exp();
          jj_consume_token(SEMI_COMMA);
{if ("" != null) return new ArrayAssign(id, exp, exp2);}
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Exp() throws ParseException {IntegerLiteral integer; // exp
    True tr;
    False fs;
    Identifier id, new_id;
    This th;
    Expression integer_exp, bang_exp, p_exp;
    NewArray new_integer; // doubt if it's correct
    NewObject new_obj;
    Not not;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
tr = new True();
{if ("" != null) return Exp_Aux(tr);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
fs = new False();
{if ("" != null) return Exp_Aux(fs);}
      break;
      }
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
integer = new IntegerLiteral(Integer.parseInt(token.image));
{if ("" != null) return Exp_Aux(integer);}
      break;
      }
    case ID:{
      id = Id();
id = IdentifierExp(id);
{if ("" != null) return Exp_Aux(id);}
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
ths = This();
{if ("" != null) return Exp_Aux(th);}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_4(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(LCOLCH);
        integer_exp = Exp();
new_integer = new NewArray(integer_exp);
        jj_consume_token(RCOLCH);
{if ("" != null) return Exp_Aux(new_integer);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:{
          jj_consume_token(NEW);
          new_id = Id();
new_obj = new NewObject(new_id);
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
{if ("" != null) return Exp_Aux(new_obj);}
          break;
          }
        case LPAREN:{
          jj_consume_token(LPAREN);
          p_exp = Exp();
          jj_consume_token(RPAREN);
{if ("" != null) return Exp_Aux(p_exp);}
          break;
          }
        case BANG:{
          jj_consume_token(BANG);
          bang_exp = Exp();
no = new No(bang_exp);
{if ("" != null) return Exp_Aux(no);}
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// doubt with the exp_aux and use of object declaration atribution
  static final public Expression Exp_Aux(Expression exp) throws ParseException {Expression exp_aux;
    And ad;
    Plus plus;
    Minus minus;
    Times times;
    LessThan less; // absence
    ArrayLookup array;
    ArrayLength length;
    Identifier id;
    ExpList explist;
    Call call;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      exp_aux = Exp();
ad = new And(exp, exp_aux);
{if ("" != null) return Exp_Aux(ad);}
      break;
      }
    case LESS_THAN:{
      jj_consume_token(LESS_THAN);
      exp_aux = Exp();
less = new LessThan(exp, exp_aux);
{if ("" != null) return Exp_Aux(less);}
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      exp_aux = Exp();
plus = new Plus(exp, exp_aux);
{if ("" != null) return Exp_Aux(plus);}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      exp_aux = Exp();
minus = new Minus(exp, exp_aux);
{if ("" != null) return Exp_Aux(minus);}
      break;
      }
    case TIMES:{
      jj_consume_token(TIMES);
      exp_aux = Exp();
times = new Times(exp, exp_aux);
{if ("" != null) return Exp_Aux(times);}
      break;
      }
    case LCOLCH:{
      jj_consume_token(LCOLCH);
      // doubt if it's correct
              exp_aux = Exp();
array = new ArrayLookup(exp, exp_aux);
      jj_consume_token(RCOLCH);
{if ("" != null) return Exp_Aux(array);}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_5(2)) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
length = new ArrayLength(exp);
{if ("" != null) return Exp_Aux(exp);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          jj_consume_token(DOT);
          id = Id();
          jj_consume_token(LPAREN);
          explist = ExpList();
          jj_consume_token(RPAREN);
call = new Call(exp, id, exp_aux);
{if ("" != null) return Exp_Aux(call);}
          break;
          }
        default:
          jj_la1[16] = jj_gen;
{if ("" != null) return exp;}
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpList() throws ParseException {Expression exp_begin;
    Expression exp_end;
    ExpList explist = new ExpList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THIS:
    case NEW:
    case TRUE:
    case FALSE:
    case LPAREN:
    case BANG:
    case ID:
    case INTEGER_LITERAL:{
      exp_begin = Exp();
explist.addElement(exp_begin);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_10;
        }
        exp_end = ExpRest();
explist.addElement(exp_end);
      }
{if ("" != null) return explist;}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
{if ("" != null) return explist;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression ExpRest() throws ParseException {Expression exp;
    jj_consume_token(COMMA);
    exp = Exp();
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Id() throws ParseException {
    jj_consume_token(ID);
{if ("" != null) return new Identifier(token.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_12()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LCOLCH)) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_3R_13()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x2800,0x2,0x2800,0x2,0x40,0x50080,0x0,0x2800,0x2800,0x50080,0x50080,0x0,0xc100,0x40000200,0x3d000000,0x0,0x0,0x4000c300,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x200,0x0,0x200,0x0,0x1,0x201,0x80,0x200,0x200,0x201,0x1,0x200,0x600,0x20,0x8,0x40,0x80,0x620,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
