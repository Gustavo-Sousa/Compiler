// https://cs.lmu.edu/~ray/notes/javacc/

PARSER_BEGIN(Parser)

public class Parser {
    public static void main(String[] args) {
        try {
            new Parser(new java.io.FileInputStream(args[0])).S(); // Source code
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(Parser)

TOKENS: {   
    // Bold keywords from book
        <PUBLIC : "public"> // Lowercase pattern
    |   <STATIC : "static">
    |   <VOID : "void">
    |   <MAIN : "main">

    |   <CLASS : "class">
    |   <EXTENDS : "extends">

    |   <PRINT : "System.out.println">

    |   <THIS : "this">
    |   <NEW : "new">
    |   <STRING : "String"> 
    |   <INT: "int">
    |   <RETURN : "return">

    |   <BOOLEAN: "boolean">
    |   <TRUE : "true">
    |   <FALSE : "false">

    |   <IF : "if">
    |   <ELSE : "else">
    |   <WHILE : "while">

    |   <LENGTH : "length">

    // Some local tokens necessary bellow
    |   <#LETTER : ["A" - "Z"]["a"-"b"] > 
    |   <#DIGIT : ["0"-"9"] >
    |   <#REAL : (
                    (<DIGIT>)+ "." (<DIGIT>)*  // Real numbers can be like this way
                  ) |
                 (
                    (<DIGIT>)* "." (<DIGIT>)+  // Or this
                  ) >
    |   <#INTERGER : (<DIGTT>)+  //  Maybe this is unnecessary
    
    // The lexical issues
    |   <ID : <LETTER>(<LETTER> | <DIGIT> | "-")*> 
    |   <INTERGER_LITERAL : <ID> | <INTERGER> | <REAL> >
    |   <OP : "&&" | "<" | "+" | "-" | "*"> // > not added
    
    
    
    
}

SKIP: {
     " " | "\t" | "\n" | "\r"
}