PARSER_BEGIN(Parser)

public class Parser {
    public static void main(String[] args) {
        try {
            new Parser(new java.io.FileInputStream(args[0])).S(); // Source code
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(Parser)

TOKEN : {   
    // Bold keywords from book
        <PUBLIC : "public"> {System.out.println("PUBLIC ");}// Lowercase pattern
    |   <STATIC : "static"> {System.out.println("STATIC ");}
    |   <VOID : "void"> {System.out.println("VOID ");}
    |   <MAIN : "main"> {System.out.println("MAIN ");}

    |   <CLASS : "class"> {System.out.println("CLASS ");}
    |   <EXTENDS : "extends"> {System.out.println("EXTENDS ");}

    |   <PRINT : "System.out.println"> {System.out.println("PRINT ");}

    |   <THIS : "this"> {System.out.println("THIS ");}
    |   <NEW : "new"> {System.out.println("NEW ");}
    |   <STRING : "String"> {System.out.println("STRING ");}
    |   <INT: "int"> {System.out.println("INT ");}
    |   <RETURN : "return"> {System.out.println("RETURN ");}

    |   <BOOLEAN: "boolean"> {System.out.println("BOOLEAN ");}
    |   <TRUE : "true"> {System.out.println("TRUE ");}
    |   <FALSE : "false"> {System.out.println("FALSE ");}

    |   <IF : "if"> {System.out.println("IF ");}
    |   <ELSE : "else"> {System.out.println("ELSE ");}
    |   <WHILE : "while"> {System.out.println("WHILE ");}

    |   <LENGTH : "length"> {System.out.println("LENGHT ");}

    // Some local tokens necessary bellow
    |   <#LETTER : (["A" - "Z"] | ["a"-"z"]) >
    |   <#DIGIT : ["0"-"9"] >
    |   <#REAL : (
                    (<DIGIT>)+ "." (<DIGIT>)*  // Real numbers can be like this way
                  ) |
                 (
                    (<DIGIT>)* "." (<DIGIT>)+  // Or this
                  ) >
    |   < #INTEGER : (<DIGIT>)+ > //  Maybe this is unnecessary
    
    // Necessary symbols
    |   <AND : "&&"> {System.out.println("AND ");}
    // |   <OR : "||"> {System.out.println("OR ");}
    |   <EQUAL : "="> {System.out.println("EQUAL ");}

    |   <LESS_THEN : "<"> {System.out.println("LESS_THEN ");}
    // |   <BIGGER_THEN : ">"> {System.out.println("BIGGER_THEN ");}
    |   <PLUS : "+"> {System.out.println("PLUSS ");}
    |   <MINUS : "-"> {System.out.println("MINUS ");}
    |   <TIMES : "*"> {System.out.println("TIMES ");}
    // |   <BAR : "/"> {System.out.println("BAR ");}

    |   <LPAREN : "("> {System.out.println("LPAREN ");}
    |   <RPAREN : ")"> {System.out.println("RPAREN ");}
    |   <LBRACE : "{"> {System.out.println("LBRACE ");}
    |   <RBRACE : "}"> {System.out.println("RBRACE ");}
    |   <RBRACE_INTER : ")?"> {System.out.println("RBRACE_INTER ");}
    |   <LCOLCH : "["> {System.out.println("LCOLCH ");}
    |   <RCOLCH : "]"> {System.out.println("RCOLCH ");}

    |   <BANG : "!"> {System.out.println("BANG ");}
    |   <DOT : "."> {System.out.println("DOT ");}
    |   <COMMA : ","> {System.out.println("COMMA ");}
    |   <SEMI_COMMA : ";"> {System.out.println("SEMI_COMMA ");}

	// The lexical issues
    |   <ID: ( <LETTER>(<LETTER> | <DIGIT> | "-")* ) > {System.out.println("ID ");}  // Expression migh be in parenthesis
    // Integer has been replaced by the entire expression and the warning has been solved
    |   <INTEGER_LITERAL : ((["0"-"9"])+) | <REAL> > {System.out.println("INTEGER_LITERAL ");}  // Only numbers


}

SKIP : {
     " " | "\t" | "\n" | "\r"
}


// Por enquanto retornam apenas void

void S():	{}{  // Tenho dúvidas se isso deve continuar assim
	MainClass() 
	(ClassDecl())*
	<EOF>
}

void MainClass():	{}{
	<CLASS>
	Id()
	<LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN>
	<LPAREN> <STRING> <LCOLCH> <RCOLCH> Id() <RPAREN>
	<LBRACE> Statement() <RBRACE>
	<RBRACE>
}

void ClassDecl():	{  // Correction

}{ 
	<CLASS> Id() ClassDecl_Aux()

}

void ClassDecl_Aux():	{}{
		(<LBRACE> (VarDecl())* (MethodDecl())* <RBRACE>)
	|	(
		<EXTENDS> Id() 
		<LBRACE> Id() (VarDecl())* (MethodDecl())* <RBRACE>
		)
	|	{}  // Empty definition
}

void VarDecl():	{}{
	Type() Id() <SEMI_COMMA>
}

void MethodDecl():	{}{
	<PUBLIC> Type() Id()
	<LPAREN> FormalList() <RPAREN>
	<LBRACE> ( LOOKAHEAD(2) VarDecl())* (Statement())* <RETURN> Exp() <SEMI_COMMA> <RBRACE>
}

void FormalList():	{}{
	Type() Id() (FormalRest())* | {}
}

void FormalRest():	{}{
	<COMMA> Type() Id()
}

void Type():	{}{
		LOOKAHEAD(2) Id() <LCOLCH> <RCOLCH> // Warning correction:I think that its the line of the earlier expansion
	|	<BOOLEAN> 
	|	<INT> 
	|	Id()
}

void Statement():	{  // Dúvida
	
}{
		<LBRACE> (Statement())* <RBRACE>
	|	<IF> <LPAREN> Exp() <RPAREN> Statement() <ELSE> Statement()
	|	<WHILE> <LPAREN> Exp() <RPAREN> Statement()
	|	<PRINT> <LPAREN> Exp() <RPAREN> <SEMI_COMMA>
	|	LOOKAHEAD(2) Id() <EQUAL> Exp() <SEMI_COMMA>
	|	Id() <LCOLCH> Exp() <RCOLCH> <EQUAL> Exp() <SEMI_COMMA>
}

void Exp():	{  // Correction

}{
		<TRUE> Exp_Aux()
	|	<FALSE> Exp_Aux()
	|	<INTEGER_LITERAL> Exp_Aux()
	|	Id() Exp_Aux()
	|	<THIS> Exp_Aux()
	|	LOOKAHEAD(2) <NEW> <INT> <LCOLCH> Exp() <RCOLCH> Exp_Aux()
	|	<NEW> Id() <LPAREN> <RPAREN> Exp_Aux()
	|	<LPAREN> Exp() <RPAREN> Exp_Aux()
	|	<BANG> Exp() Exp_Aux()
}

void Exp_Aux():	{}{
		<AND> Exp() Exp_Aux()
	//|	<OR> Exp() Exp_Aux()
	|	<PLUS> Exp() Exp_Aux()
	|	<MINUS> Exp() Exp_Aux()
	|	<TIMES> Exp() Exp_Aux()
	|	<LCOLCH> Exp() <RCOLCH> Exp_Aux()
	|	LOOKAHEAD(2) <DOT> <LENGTH> Exp_Aux()
	|	<DOT> Id() <LPAREN> ExpList() <RPAREN> Exp_Aux()
	|	{}
}

void ExpList():	{}{
		Exp() (ExpRest())*
	|	{}
}

void ExpRest():	{}{
	<COMMA> Exp()
}

Token Id():	{  // Token or int
	Token t;
}{  // Declared and struture
	t=<ID> { return lookup(t.image);}  // acho que esta certo
}